/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package jpanels;

import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author edenj
 */
public class JPanelSubjects extends javax.swing.JPanel {

    private boolean guardar = false;
    private javax.swing.JSpinner semestreDefault = null;
    private String valorOriginal;
    private final listas.ListaDoblementeLigadaCircular lista = listas.ListManager.lista;
    private javax.swing.JFrame window = null;
    private javax.swing.table.DefaultTableModel tableModel = null;

    /**
     * Creates new form Prueba
     *
     * @param window JFrame para poner como parent en el JDialog.
     * @param semestreDefault JSpinner que contiene el semestre por default del
     * header.
     */
    public JPanelSubjects(javax.swing.JFrame window, javax.swing.JSpinner semestreDefault) {
        this.window = window;
        initComponents();
        this.tableModel = ((javax.swing.table.DefaultTableModel) this.jTableAsignaturas.getModel());
        this.semestreDefault = semestreDefault;
        moreConfiguration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAsignaturas = new javax.swing.JTable();
        jButtonAgregar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 450));

        jTableAsignaturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Semestre", "Clave", "Asignatura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAsignaturas.setRowHeight(35);
        jTableAsignaturas.getTableHeader().setReorderingAllowed(false);
        jTableAsignaturas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableAsignaturasPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAsignaturas);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonAgregar))
                .addGap(0, 16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        jframes.JDialogNewSubject newSubject = new jframes.JDialogNewSubject(this.window, true, "Agregar Asignatura", this.tableModel, this.semestreDefault);
        newSubject.setLocationRelativeTo(this);
        newSubject.setVisible(true);
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int rowsSelected[] = this.jTableAsignaturas.getSelectedRows();
        if (rowsSelected.length > 0) {
            for (int i = rowsSelected.length - 1; i >= 0; i--) {
                this.lista.elimina((String) tableModel.getValueAt(rowsSelected[i], 1));
                this.tableModel.removeRow(rowsSelected[i]);
            }
            tools.JOPaneMessages.exito(this, "Fila(s) eliminada(s) con éxito");
        } else {
            tools.JOPaneMessages.error(this, "No se hay selección a eliminar");
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jTableAsignaturasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableAsignaturasPropertyChange
        //Obtenemos la columna y fila seleccionadas.
        int colSelected = this.jTableAsignaturas.getSelectedColumn();
        int rowSelected = this.jTableAsignaturas.getSelectedRow();

        //Revisamos si se editó algo o no.
        if (this.jTableAsignaturas.isEditing()) {
            if (!this.guardar) {
                this.valorOriginal = "" + tableModel.getValueAt(rowSelected, colSelected);
                this.guardar = true;
            }
        } else {
            if (this.guardar) {
                boolean claveExistente = false;
                int rowEdit = this.jTableAsignaturas.getEditingRow();
                int colEdit = this.jTableAsignaturas.getEditingColumn();
                String newValue = "" + tableModel.getValueAt(rowEdit, colEdit);
                if (!this.valorOriginal.equals(newValue)) {
                    String clave;
                    if (colEdit != 1) {
                        clave = "" + tableModel.getValueAt(rowEdit, 1);
                    } else {
                        clave = this.valorOriginal;
                    }
                    listas.Nodo nodo = this.lista.buscar(clave);

                    if (colEdit == 1) {
                        listas.Nodo tmp = this.lista.buscar(newValue);
                        if (tmp != null) {
                            claveExistente = true;
                            this.jTableAsignaturas.setValueAt(this.valorOriginal, rowEdit, colEdit);
                        } else if (nodo.getObj() instanceof models.Subject subject) {
                            subject.setClave(newValue);
                            nodo.setEtiqueta(newValue);
                        }
                    } else {
                        if (nodo != null) {
                            if (nodo.getObj() instanceof models.Subject subject) {
                                if (colEdit == 0) {
                                    subject.setSemestre(Integer.parseInt(newValue));
                                } else if (colEdit == 2) {
                                    subject.setAsignatura(newValue);
                                }
                            }
                        }
                    }
                    if (claveExistente) {
                        tools.JOPaneMessages.error(this, "Clave ya usada");
                    } else {
                        tools.JOPaneMessages.exito(this, "Valor Actualizado con Éxito");
                    }
                }
                this.guardar = false;
                this.valorOriginal = null;
            }
        }
    }//GEN-LAST:event_jTableAsignaturasPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAsignaturas;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que nos permite realizar cierta configuración a nuestro JPanel.
     */
    private void moreConfiguration() {
        //Set Backgrounds
        this.jTableAsignaturas.setBackground(tools.RootVariables.backgroundDefault);
        //Set Fonts
        this.jTableAsignaturas.getTableHeader().setFont(tools.RootVariables.fontMenu);
        this.jTableAsignaturas.setFont(tools.RootVariables.fontMenu);
        this.jButtonAgregar.setFont(tools.RootVariables.fontMenu);
        this.jButtonEliminar.setFont(tools.RootVariables.fontMenu);

        //Set Data From Listas
        listas.Nodo nodo = this.lista.getPrimero();
        if (nodo != null) {
            do {
                models.Subject subject = (models.Subject) nodo.getObj();
                this.tableModel.addRow(new Object[]{subject.getSemestre(), subject.getClave(), subject.getAsignatura()});
                nodo = nodo.getSiguiente();
            } while (nodo != this.lista.getPrimero());
        }

        //Set Alignment
        ((DefaultTableCellRenderer) jTableAsignaturas.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(0);

        for (int i = 0; i < jTableAsignaturas.getColumnCount(); i++) {
            ((DefaultTableCellRenderer) jTableAsignaturas.getDefaultRenderer(jTableAsignaturas.getColumnClass(i))).setHorizontalAlignment(0);
        }
    }
}

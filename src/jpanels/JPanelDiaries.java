/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package jpanels;

import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author edenj
 */
public class JPanelDiaries extends javax.swing.JPanel {

    private javax.swing.table.DefaultTableModel tableModel = null;
    private java.util.ArrayList<java.util.ArrayList<listas.Nodo>> horarios;
    private int indiceHorario = -1;

    /**
     * Creates new form JPanelDiaries
     */
    public JPanelDiaries() {
        initComponents();
        this.tableModel = ((javax.swing.table.DefaultTableModel) this.jTableDiaries.getModel());
        moreConfiguration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDiaries = new javax.swing.JTable();
        jLabelNext = new javax.swing.JLabel();
        jLabelBefore = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(600, 450));

        jTableDiaries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Semestre", "Codigo", "Nombre Asignatura"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDiaries.setRowHeight(35);
        jTableDiaries.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableDiaries);

        jLabelNext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/next.png"))); // NOI18N
        jLabelNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelNextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelNextMouseExited(evt);
            }
        });

        jLabelBefore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBefore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/before.png"))); // NOI18N
        jLabelBefore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBeforeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelBeforeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelBeforeMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabelBefore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(300, 300, 300)
                        .addComponent(jLabelNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 76, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelBefore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelBeforeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBeforeMouseEntered
        if (jLabelBefore.isEnabled()) {
            this.jLabelBefore.setBorder(tools.RootVariables.borderMain);
        }
    }//GEN-LAST:event_jLabelBeforeMouseEntered

    private void jLabelBeforeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBeforeMouseExited
        this.jLabelBefore.setBorder(null);
    }//GEN-LAST:event_jLabelBeforeMouseExited

    private void jLabelNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseEntered
        if (jLabelNext.isEnabled()) {
            this.jLabelNext.setBorder(tools.RootVariables.borderMain);
        }
    }//GEN-LAST:event_jLabelNextMouseEntered

    private void jLabelNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseExited
        this.jLabelNext.setBorder(null);
    }//GEN-LAST:event_jLabelNextMouseExited

    private void jLabelNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseClicked
        if (this.indiceHorario + 1 < this.horarios.size()) {
            this.showDiary(this.horarios.get(++this.indiceHorario));
            if (this.indiceHorario + 1 == this.horarios.size()) {
                this.jLabelNext.setEnabled(false);
            }
            if (this.indiceHorario > 0) {
                this.jLabelBefore.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jLabelNextMouseClicked

    private void jLabelBeforeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBeforeMouseClicked
        if (this.indiceHorario - 1 >= 0) {
            this.showDiary(this.horarios.get(--this.indiceHorario));
            if (this.indiceHorario == 0) {
                this.jLabelBefore.setEnabled(false);
            }
            if (this.indiceHorario + 1 < this.horarios.size()) {
                this.jLabelNext.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jLabelBeforeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelBefore;
    private javax.swing.JLabel jLabelNext;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDiaries;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para configuraciones despues de inicializar los elementos.
     */
    private void moreConfiguration() {
        //Set Backgrounds
        this.jTableDiaries.setBackground(tools.RootVariables.backgroundDefault);
        //Set Fonts
        this.jTableDiaries.getTableHeader().setFont(tools.RootVariables.fontMenu);
        this.jTableDiaries.setFont(tools.RootVariables.fontMenu);

        //Set Alignment
        ((DefaultTableCellRenderer) jTableDiaries.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(0);

        for (int i = 0; i < jTableDiaries.getColumnCount(); i++) {
            ((DefaultTableCellRenderer) jTableDiaries.getDefaultRenderer(jTableDiaries.getColumnClass(i))).setHorizontalAlignment(0);
        }
    }

    /**
     * Método que nos permite refrescar los datos de la tabla.
     *
     * @param horarios horario a mostrar en la tabla.
     */
    public void refreshData(java.util.ArrayList<java.util.ArrayList<listas.Nodo>> horarios) {
        this.jLabelBefore.setEnabled(false);
        this.jLabelNext.setEnabled(false);
        if (horarios != null) {
            this.horarios = horarios;
            if (!horarios.isEmpty()) {
                this.indiceHorario = 0;
                showDiary(horarios.get(this.indiceHorario));
                if (this.horarios.size() > 1) {
                    this.jLabelNext.setEnabled(true);
                }
            } else {
                tools.JOPaneMessages.error(this, "No hay combinaciones posibles", "Error en Combinaciones");
                this.tableModel.setRowCount(0);
            }

        }
    }

    /**
     * Método que nos permite agregar datos a una tabla.
     *
     * @param horario ArrayList que nos permite agregar los datos de un nodo a
     * la tabla.
     */
    private void showDiary(java.util.ArrayList<listas.Nodo> horario) {
        this.tableModel.setNumRows(0);
        for (listas.Nodo asignaturaNodo : horario) {
            models.Subject asignatura = (models.Subject) asignaturaNodo.getObj();
            if (asignatura != null) {
                this.tableModel.addRow(new Object[]{asignatura.getSemestre(), asignatura.getClave(), asignatura.getAsignatura()});
            }
        }
    }
}
